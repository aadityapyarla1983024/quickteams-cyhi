import React, { Fragment, useState } from "react";
import {
  Box,
  Button,
  Stack,
  TextField,
  MenuItem,
  Typography,
  RadioGroup,
  FormControlLabel,
  Radio,
} from "@mui/material";
import TeamMatchAutocomplete from "../components/chipinput";

export default function TeamCreateForm() {
  const [teamData, setTeamData] = useState({
    name: "",
    eventKey: "",
    type: "fulltime",
    mode: "online", // "online" or "offline"
    venue: "online",
    description: "",
    skillsRequired: [],
    maxMembers: 5,
  });

  const handleChange = (name, value) => {
    setTeamData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleModeChange = (e) => {
    const mode = e.target.value;
    setTeamData((prev) => ({
      ...prev,
      mode,
      venue: mode === "online" ? "online" : "",
    }));
  };

  const handleSubmit = () => {
    console.log("Team Data:", teamData);
    // TODO: Save to Firestore
  };

  return (
    <Fragment>
      <Stack spacing={3} sx={{ width: "70%", mx: "auto", mt: "5%" }}>
        <Typography variant="h5" align="center">
          Create a Team
        </Typography>

        {/* Team Name */}
        <TextField
          label="Team Name"
          value={teamData.name}
          onChange={(e) => handleChange("name", e.target.value)}
          fullWidth
        />

        {/* Event Key */}
        <TextField
          label="Event Name"
          helperText="Unique key will be generated by lowercasing & removing spaces."
          value={teamData.eventKey}
          onChange={(e) =>
            handleChange("eventKey", e.target.value.toLowerCase().replace(/\s+/g, ""))
          }
          fullWidth
        />

        {/* Team Type */}
        <TextField
          select
          label="Team Type"
          value={teamData.type}
          onChange={(e) => handleChange("type", e.target.value)}
          fullWidth
        >
          <MenuItem value="fulltime">Fulltime</MenuItem>
          <MenuItem value="parttime">Parttime</MenuItem>
        </TextField>

        {/* Mode (Online / Offline) */}
        <Box>
          <Typography variant="subtitle1">Mode</Typography>
          <RadioGroup row name="mode" value={teamData.mode} onChange={handleModeChange}>
            <FormControlLabel value="online" control={<Radio />} label="Online" />
            <FormControlLabel value="offline" control={<Radio />} label="Offline" />
          </RadioGroup>
        </Box>

        {/* Venue (only if Offline) */}
        {teamData.mode === "offline" && (
          <TextField
            label="Venue Address"
            placeholder="Enter event location address"
            value={teamData.venue}
            onChange={(e) => handleChange("venue", e.target.value)}
            fullWidth
          />
        )}

        {/* Description */}
        <TextField
          label="Description"
          multiline
          rows={3}
          value={teamData.description}
          onChange={(e) => handleChange("description", e.target.value)}
          fullWidth
        />

        {/* Skills Required */}
        <TeamMatchAutocomplete
          handleSubmit={(name, value) => handleChange("skillsRequired", value)}
          name="skillsRequired"
        />

        {/* Max Members */}
        <TextField
          label="Max Members"
          type="number"
          value={teamData.maxMembers}
          onChange={(e) => handleChange("maxMembers", parseInt(e.target.value, 10))}
          fullWidth
        />

        {/* Submit Button */}
        <Box textAlign="center">
          <Button variant="contained" sx={{ width: "40%" }} onClick={handleSubmit}>
            Create Team
          </Button>
        </Box>
      </Stack>
    </Fragment>
  );
}
