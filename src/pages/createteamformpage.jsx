import React, { Fragment, useState } from "react";
import {
  Box,
  Button,
  Stack,
  TextField,
  MenuItem,
  Typography,
  RadioGroup,
  FormControlLabel,
  Radio,
} from "@mui/material";
import { DatePicker } from "@mui/x-date-pickers/DatePicker"; // Import MUI DatePicker
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns"; // Adapter for date-fns
import TeamMatchAutocomplete from "../components/chipinput";
import { db } from "../firebase";
import { addDoc, collection, serverTimestamp, Timestamp } from "firebase/firestore";
import { useAuth } from "../contexts/AuthContext";
import { useNavigate } from "react-router-dom";

export default function TeamCreateForm() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [teamData, setTeamData] = useState({
    name: "",
    eventKey: "",
    type: "fulltime",
    mode: "online",
    venue: "online",
    description: "",
    skillsRequired: [],
    strengthsRequired: [],
    maxMembers: 5,
    date: null, // use Date object for MUI DatePicker
  });

  const handleChange = (name, value) => {
    setTeamData((prev) => ({ ...prev, [name]: value }));
  };

  const handleModeChange = (e) => {
    const mode = e.target.value;
    setTeamData((prev) => ({ ...prev, mode, venue: mode === "online" ? "online" : "" }));
  };

  const handleSubmit = async () => {
    if (!user) {
      alert("Please login first.");
      return;
    }
    try {
      const dateValue = teamData.date ? Timestamp.fromDate(new Date(teamData.date)) : null;

      const docRef = await addDoc(collection(db, "teams"), {
        ...teamData,
        date: dateValue,
        createdBy: user.uid,
        memberIds: [user.uid],
        pendingRequests: [],
        createdAt: serverTimestamp(),
      });

      navigate(`/teamdetails/${docRef.id}`);
    } catch (error) {
      console.error("Error creating team:", error);
      alert("Failed to create team.");
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Fragment>
        <Stack spacing={3} sx={{ width: "70%", mx: "auto", mt: "5%", mb: "3rem" }}>
          <Typography variant="h5" align="center">
            Create a Team
          </Typography>

          {/* Team Name */}
          <TextField
            label="Team Name"
            value={teamData.name}
            onChange={(e) => handleChange("name", e.target.value)}
            fullWidth
          />

          {/* Event Key */}
          <TextField
            label="Event Name"
            helperText="Unique key will be generated by lowercasing & removing spaces."
            value={teamData.eventKey}
            onChange={(e) =>
              handleChange("eventKey", e.target.value.toLowerCase().replace(/\s+/g, ""))
            }
            fullWidth
          />

          {/* Team Type */}
          <TextField
            select
            label="Team Type"
            value={teamData.type}
            onChange={(e) => handleChange("type", e.target.value)}
            fullWidth
          >
            <MenuItem value="fulltime">Fulltime</MenuItem>
            <MenuItem value="parttime">Parttime</MenuItem>
          </TextField>

          {/* Mode (Online / Offline) */}
          <Box>
            <Typography variant="subtitle1">Mode</Typography>
            <RadioGroup row name="mode" value={teamData.mode} onChange={handleModeChange}>
              <FormControlLabel value="online" control={<Radio />} label="Online" />
              <FormControlLabel value="offline" control={<Radio />} label="Offline" />
            </RadioGroup>
          </Box>

          {/* Venue (only if Offline) */}
          {teamData.mode === "offline" && (
            <TextField
              label="Venue Address"
              placeholder="Enter event location address"
              value={teamData.venue}
              onChange={(e) => handleChange("venue", e.target.value)}
              fullWidth
            />
          )}

          {/* Date Picker */}
          <DatePicker
            label="Event Date"
            value={teamData.date}
            onChange={(newValue) => handleChange("date", newValue)}
            renderInput={(params) => <TextField {...params} fullWidth />}
          />

          {/* Description */}
          <TextField
            label="Description"
            multiline
            rows={3}
            value={teamData.description}
            onChange={(e) => handleChange("description", e.target.value)}
            fullWidth
          />

          {/* Skills Required */}
          <TeamMatchAutocomplete handleChange={handleChange} />

          {/* Max Members */}
          <TextField
            label="Max Members"
            type="number"
            value={teamData.maxMembers}
            onChange={(e) => handleChange("maxMembers", parseInt(e.target.value, 10))}
            fullWidth
          />

          {/* Submit Button */}
          <Box textAlign="center">
            <Button variant="contained" sx={{ width: "70%" }} onClick={handleSubmit}>
              Create Team
            </Button>
          </Box>
        </Stack>
      </Fragment>
    </LocalizationProvider>
  );
}
