// TeamEditPage.jsx

import React, { Fragment, useEffect, useState } from "react";
import { doc, getDoc, updateDoc } from "firebase/firestore";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  Stack,
  Typography,
  TextField,
  MenuItem,
  RadioGroup,
  FormControlLabel,
  Radio,
  Button,
  Box,
} from "@mui/material";
import TeamMatchAutocomplete from "../components/chipinput";

export default function TeamEditPage() {
  const { id } = useParams();
  const navigate = useNavigate();

  const [teamData, setTeamData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchTeam() {
      setLoading(true);
      try {
        const snap = await getDoc(doc(db, "teams", id));
        if (snap.exists()) {
          setTeamData(snap.data());
        }
      } catch (error) {
        console.error("Failed to fetch team:", error);
      } finally {
        setLoading(false);
      }
    }
    fetchTeam();
  }, [id]);

  const handleChange = (name, value) => {
    setTeamData((prev) => ({ ...prev, [name]: value }));
  };

  const handleUpdate = async () => {
    try {
      await updateDoc(doc(db, "teams", id), {
        name: teamData.name,
        eventKey: teamData.eventKey,
        type: teamData.type,
        mode: teamData.mode,
        venue: teamData.venue,
        description: teamData.description,
        skillsRequired: teamData.skillsRequired,
        strengthsRequired: teamData.strengthsRequired,
        maxMembers: teamData.maxMembers,
      });
      alert("Team updated successfully.");
      navigate(`/teamdetails/${id}`);
    } catch (e) {
      console.error("Error updating team:", e);
      alert("Update failed, please try again.");
    }
  };

  if (loading) {
    return (
      <Fragment>
        <Typography variant="h5" sx={{ textAlign: "center", mt: 5 }}>
          Loading team data...
        </Typography>
      </Fragment>
    );
  }

  if (!teamData) {
    return (
      <Fragment>
        <Typography variant="h5" sx={{ textAlign: "center", mt: 5 }}>
          Team not found.
        </Typography>
      </Fragment>
    );
  }

  return (
    <Fragment>
      <Box sx={{ width: "70%", mx: "auto", mt: "5%" }}>
        <Typography variant="h5" align="center" gutterBottom>
          Edit Team
        </Typography>

        <Stack spacing={3}>
          <TextField
            label="Team Name"
            value={teamData.name}
            onChange={(e) => handleChange("name", e.target.value)}
            fullWidth
          />

          <TextField
            label="Event Key"
            helperText="Unique key will be generated by lowercasing & removing spaces."
            value={teamData.eventKey}
            onChange={(e) =>
              handleChange("eventKey", e.target.value.toLowerCase().replace(/\s+/g, ""))
            }
            fullWidth
          />

          <TextField
            select
            label="Team Type"
            value={teamData.type}
            onChange={(e) => handleChange("type", e.target.value)}
            fullWidth
          >
            <MenuItem value="fulltime">Fulltime</MenuItem>
            <MenuItem value="parttime">Parttime</MenuItem>
          </TextField>

          <Typography variant="subtitle1">Mode</Typography>
          <RadioGroup
            row
            value={teamData.mode}
            onChange={(e) => {
              const val = e.target.value;
              handleChange("mode", val);
              if (val === "online") handleChange("venue", "online");
              else if (teamData.venue === "online") handleChange("venue", "");
            }}
          >
            <FormControlLabel value="online" control={<Radio />} label="Online" />
            <FormControlLabel value="offline" control={<Radio />} label="Offline" />
          </RadioGroup>

          {teamData.mode === "offline" && (
            <TextField
              label="Venue Address"
              value={teamData.venue === "online" ? "" : teamData.venue}
              onChange={(e) => handleChange("venue", e.target.value)}
              fullWidth
            />
          )}

          <TextField
            label="Description"
            multiline
            rows={3}
            value={teamData.description}
            onChange={(e) => handleChange("description", e.target.value)}
            fullWidth
          />

          <TeamMatchAutocomplete
            handleSubmit={handleChange}
            initialValueSkills={teamData.skillsRequired}
            initialValueStrengths={teamData.strengthsRequired}
          />

          <TextField
            label="Max Members"
            type="number"
            value={teamData.maxMembers}
            onChange={(e) => handleChange("maxMembers", parseInt(e.target.value, 10))}
            fullWidth
          />

          <Box textAlign="center" mt={3}>
            <Button variant="contained" sx={{ width: "40%" }} onClick={handleUpdate}>
              Save Changes
            </Button>
          </Box>
        </Stack>
      </Box>
    </Fragment>
  );
}
